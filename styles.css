
/*
   ═══════════════════════════════════════════════════════════════
   DESIGN SYSTEM - CSS VARIABLES
   ═══════════════════════════════════════════════════════════════

   This is where we define all the colors, spacing, and fonts for the
   entire website. By using variables, we can change the whole design
   by just updating these values. It's like having a master control
   panel for the entire site's look and feel.
*/

:root {
  /*
     COLOR PALETTE
     These colors create the watch.it brand identity. We use a dark
     purple theme with teal and yellow accents for a modern, vibrant look.
  */
  --brand-bg: #070410;           /* Deep dark purple - the main background color for the entire page */
  --brand-surface: #231651;      /* Slightly lighter purple - used for movie cards and containers */
  --brand-accent: #4DCCBD;       /* Teal color - primary accent for buttons and interactive elements */
  --brand-accent-2: #EEF36A;     /* Bright yellow - used for highlights and hover effects */
  --text: #FFFFFF;               /* Pure white - main text color for maximum contrast and readability */
  --muted: #9aa4b2;              /* Soft gray - for secondary text like metadata and descriptions */
  --outline: #231651;            /* Purple - matches surface color for subtle borders and dividers */

  /*
     SPACING SCALE - Mobile First Approach (360px-720px)
     We start with mobile spacing and increase it on larger screens.
     This ensures the design looks good on phones first, then scales up.
  */
  --space-s: 16px;               /* Small spacing - used for gaps inside cards and between small elements */
  --space-l: 16px;               /* Large spacing - same as small on mobile, increases on tablet/desktop */

  /*
     TYPOGRAPHY - Font Families and Sizes
     We use two fonts: Teko for bold headings and buttons, Lato for body text.
     This combination creates a modern, readable design.
  */
  --ff-heading: 'Teko', system-ui, sans-serif;    /* Bold, geometric font - perfect for titles and buttons */
  --ff-body: 'Lato', system-ui, sans-serif;       /* Clean, readable font - used for all body text and descriptions */
  --fs-header: 2em;              /* Brand logo size on mobile - 2em = 32px at 16px base */
  --fs-button: 2em;              /* Button text size - consistent across all breakpoints for easy tapping */
  --fs-movie: 1.5em;             /* Movie title size - 1.5em = 24px, prominent but not overwhelming */
}

/*
   ═══════════════════════════════════════════════════════════════
   TABLET BREAKPOINT (720px - 1024px)
   ═══════════════════════════════════════════════════════════════

   When the screen is at least 720px wide (tablets), we increase the
   spacing to give content more breathing room. The larger screen real
   estate allows us to spread things out more comfortably. We also make
   the logo bigger since there's more space in the header.
*/
@media (min-width: 720px) {
  :root {
    --space-l: 32px;    /* Double the spacing - 32px instead of 16px for more breathing room */
    --fs-header: 3em;   /* Logo grows to 3em (48px) - much more prominent on tablets */
  }
}

/*
   ═══════════════════════════════════════════════════════════════
   DESKTOP BREAKPOINT (1024px and up)
   ═══════════════════════════════════════════════════════════════

   On large desktop screens, we maximize the spacing to create a
   luxurious, open feel. The extra space makes the design feel premium
   and less cramped. This is the final, most spacious version of the design.
*/
@media (min-width: 1024px) {
  :root {
    --space-l: 48px;    /* Maximum spacing - 48px for a premium, open feel on large screens */
  }
}

/*
   ═══════════════════════════════════════════════════════════════
   GLOBAL STYLES - Foundation
   ═══════════════════════════════════════════════════════════════

   These are the base styles that apply to every element on the page.
   Think of this as the foundation - we're setting up the default
   behavior for all HTML elements before we style specific components.
*/

/*
   Box Model Reset
   By default, padding and borders add to an element's width. This
   changes that behavior so padding is included in the width calculation.
   This makes sizing elements much more predictable and easier to work with.
*/
* { box-sizing: border-box; }

/*
   Full Height Layout
   Makes the html and body elements take up the full height of the viewport.
   This is useful for creating full-screen layouts and sticky footers.
*/
html, body { height: 100%; }

/*
   Body Element Styling
   Sets up the default appearance for the entire page. We remove the default
   margin, set the font to Lato for readability, use white text for contrast,
   and apply the dark purple background color throughout.
*/
body {
  margin: 0;
  font-family: var(--ff-body);      /* Lato font - clean and readable for all body text */
  color: var(--text);               /* White text - provides excellent contrast on dark background */
  background: var(--brand-bg);      /* Dark purple background - creates the watch.it brand feel */
}

/*
   Responsive Images
   Images automatically scale down to fit their container without exceeding
   100% width. Display: block removes the default inline spacing that images
   have, which can cause alignment issues.
*/
img { max-width: 100%; display: block; }

/*
   ═══════════════════════════════════════════════════════════════
   HEADER SECTION - Navigation Bar
   ═══════════════════════════════════════════════════════════════

   The header is the top navigation bar that contains the watch.it logo,
   navigation menu (Action, Comedy, Romance, Drama), and search button.
   It stays visible at the top of the page as users scroll down.
*/

/*
   Main Header Container
   Position: sticky keeps the header visible at the top while scrolling.
   Z-index: 10 ensures it stays above other content. We use a slightly
   lighter background than the page background to make it distinct.
*/
.site-header {
  position: sticky;
  top: 0;
  z-index: 10;
  background: #0f1522;              /* Slightly lighter than page background for definition */
  border-bottom: 1px solid var(--outline);  /* Subtle purple line separates header from content */
}

/*
   Header Inner Container
   This centers the content and limits the width to 900px. We use CSS Grid
   to arrange the logo, navigation, and search button. On mobile, it's just
   logo on left and search on right. On larger screens, the menu appears in the middle.
*/
.header-inner {
  max-width: 900px;
  margin: 0 auto;
  padding: var(--space-s);
  display: grid;
  grid-template-columns: 1fr auto;  /* Logo takes available space, search button stays compact */
  align-items: center;
  gap: var(--space-l);
}

/*
   Desktop Header Padding
   On large screens, we increase the padding to match the spacious feel
   of the rest of the design. This creates better visual balance.
*/
@media (min-width: 1024px) {
  .header-inner {
    padding: var(--space-l);        /* 48px padding on desktop for premium feel */
  }
}

/*
   Brand Logo - "watch.it"
   Uses the bold Teko font to make it stand out. The size changes based on
   screen size: 2em on mobile, 3em on tablet/desktop. Letter-spacing adds
   a modern, spaced-out look. White-space: nowrap prevents it from wrapping.
*/
.brand {
  font-family: var(--ff-heading);   /* Bold Teko font - distinctive and modern */
  font-size: var(--fs-header);      /* Responsive: 2em mobile, 3em tablet/desktop */
  letter-spacing: 0.5px;            /* Slight spacing between letters for style */
  white-space: nowrap;              /* Keeps logo on one line */
}

/*
   Navigation Menu
   Contains links to Action, Comedy, Romance, and Drama categories.
   Hidden by default on mobile (display: none) to save space. Appears
   on tablets and desktops. Centered with flexbox and spaced with gap.
*/
.nav {
  display: none;                    /* Hidden on mobile - too cramped */
  justify-content: center;          /* Center the menu items */
  gap: var(--space-l);              /* Space between each menu item */
}

/*
   Navigation Links
   Each menu item is a link. We use opacity: 0.9 to make them slightly
   transparent, creating a subtle visual hierarchy. The transition makes
   the hover effect smooth and polished.
*/
.nav a {
  font-family: var(--ff-body);      /* Regular Lato font - readable and clean */
  color: var(--text);               /* White text for contrast */
  text-decoration: none;            /* Remove underline */
  opacity: 0.9;                     /* Slightly transparent - not as bold as logo */
  transition: color 0.2s ease;      /* Smooth animation when hovering */
}

/*
   Navigation Link Hover Effect
   When users hover over a menu item, it becomes fully opaque (brighter).
   This provides visual feedback that the link is interactive.
*/
.nav a:hover {
  color: white;                     /* Becomes fully white and opaque on hover */
}

/*
   TABLET HEADER LAYOUT (720px+)
   On tablets, we have enough space to show the navigation menu.
   The grid changes to 3 columns: logo (auto), menu (1fr takes remaining space),
   and search button (auto). This creates a balanced header layout.
*/
@media (min-width: 720px) {
  .header-inner {
    grid-template-columns: auto 1fr auto;  /* Logo, menu (flexible), search button */
  }

  .nav {
    display: flex;                  /* Show the menu - was hidden on mobile */
  }
}

/*
   DESKTOP HEADER LAYOUT (1024px+)
   On large screens, we ensure perfect alignment. The logo stays on the far left,
   the menu is centered, and the search button is on the far right. This creates
   a professional, balanced header that looks great on wide screens.
*/
@media (min-width: 1024px) {
  .header-inner {
    grid-template-columns: auto 1fr auto;
    justify-items: center;          /* Center items by default */
  }

  .brand {
    justify-self: start;            /* Override: logo goes to the left */
  }

  .search-form {
    justify-self: end;              /* Override: search goes to the right */
  }
}

/*
   
   SEARCH FORM
   

   The search functionality is simplified on mobile - just a button.
*/

/*
   Search Container
   Uses flexbox to align the search input and button horizontally.
   The gap creates space between elements. This is a simple, clean layout.
*/
.search {
  display: flex;
  gap: var(--space-s);
  align-items: center;
}

/*
   
*/
.search input {
  display: none;                    /* Hidden on mobile - too cramped */
}

/*
   Search Button
   White-space: nowrap prevents the button text from wrapping to multiple
   lines. This keeps the button compact and easy to tap on mobile devices.
*/
.search .btn {
  white-space: nowrap;              /* Keep button text on one line */
}

/*
   
   MAIN CONTENT CONTAINER
   

   This is the main area where all the movie content is. It's centered
   on the page with a max-width of 900px to prevent it from getting too wide
   on large screens. The layout changes based on screen size:
   - Mobile: 1 column (everything stacks)
   - Tablet: 2 columns (more efficient use of space)
   - Desktop: 1 column (featured movie takes full width)
*/

/*
   Container Base Styles
   Max-width: 900px keeps content readable and prevents lines from getting
   too long. Padding adds space around the edges. Margin centers it on the page.
   Display: grid with gap creates space between movie sections.
*/
.container {
  max-width: 900px;
  padding: var(--space-l);          /* Space around edges - 16px mobile, 32px tablet, 48px desktop */
  margin: var(--space-l) auto;      /* Centered with top/bottom margin */
  display: grid;
  gap: var(--space-l);              /* Space between movie sections */
  grid-template-columns: 1fr;       /* Single column on mobile - everything stacks vertically */
}

/*
   TABLET LAYOUT (720px - 1024px)
   On tablets, we have more horizontal space, so we use 2 columns.
   This allows us to show more movies at once without making them too small.
   The featured movie still takes full width (handled separately).
*/
@media (min-width: 720px) and (max-width: 1023px) {
  .container {
    grid-template-columns: 1fr 1fr;  /* 2 equal-width columns */
  }
}

/*
   DESKTOP LAYOUT (1024px+)
   On desktop, we go back to 1 column. The featured movie section is large
   and takes full width. Other sections are arranged below it. This creates
   a clear visual hierarchy with the featured content prominent.
*/
@media (min-width: 1024px) {
  .container {
    grid-template-columns: 1fr;     /* Back to single column for featured content prominence */
  }
}

/*
   
   BUTTONS - Interactive Elements
   

   Buttons are key interactive elements. We use the bold Teko font, and we make them large (2em) for easy tapping on mobile.
   The teal color (#4DCCBD) is our primary brand accent.
*/

/*
   Base Button Styles
   All buttons share these properties. Font-size: 2em makes them large and
   easy to tap. Padding creates internal space. Border-radius rounds the corners
   for a modern look. Cursor: pointer shows it's clickable. Transition makes
   the hover effect smooth and polished.
*/
.btn {
  font-family: var(--ff-heading);   /* Bold Teko font - stands out and grabs attention */
  font-size: var(--fs-button);      /* 2em - large enough for easy tapping on mobile */
  padding: var(--space-s);          /* 16px padding - comfortable internal spacing */
  border-radius: var(--space-s);    /* 16px rounded corners - modern, friendly look */
  border: 1px solid transparent;    /* Transparent border - no visible border by default */
  cursor: pointer;                  /* Changes cursor to pointer - shows it's clickable */
  transition: filter 0.2s ease;     /* Smooth 0.2s animation for hover effects */
}

/*
   Primary Button Style
   The main call-to-action button. Uses teal background (#4DCCBD) which is
   our brand accent color. White text provides excellent contrast. This button
   is used for "Watch Now" and other important actions.
*/
.btn-primary {
  background: var(--brand-accent);  /* Teal background - brand accent color */
  color: white;                     /* White text - maximum contrast */
  border-color: #9b0b12;            /* Dark border - subtle definition */
}

/*
   Primary Button Hover Effect
   When users hover over the button, we increase the brightness slightly.
   This creates visual feedback that the button is interactive and ready to click.
   The 1.05 brightness (5% increase) is subtle but noticeable.
*/
.btn-primary:hover {
  filter: brightness(1.05);         /* 5% brighter on hover - subtle but effective feedback */
}

/*
   Movie Card Buttons
   Buttons inside movie cards take up the full width of their container.
   This makes them easier to tap on mobile and creates a consistent, spacious look.
*/
.movie .btn-primary {
  width: 100%;                      /* Full width - easier to tap, more prominent */
}

/*
   ═══════════════════════════════════════════════════════════════
   MOVIE CARDS - Content Containers
   ═══════════════════════════════════════════════════════════════

   Movie cards are the main content blocks. Each card contains a poster image,
   title, description, and a "Watch Now" button. The cards have a purple
   background to match the brand, and subtle shadows for depth.
*/

/*
   Movie Card Container
   Each movie is displayed in a card with a purple background. The card uses
   CSS Grid to arrange the poster, title, description, and button vertically.
   The gap creates space between elements. Padding adds internal spacing.
*/
.movie {
  background: var(--brand-surface);  /* Deep purple background - matches brand */
  border: 1px solid var(--outline);  /* Purple border - subtle definition */
  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.4);  /* Subtle shadow - adds depth and dimension */
  display: grid;
  gap: var(--space-s);              /* 16px space between poster, title, description, button */
  padding: var(--space-s);          /* 16px padding inside the card */
  align-items: start;               /* Align items to the top */
  font-size: var(--fs-movie);       /* 1.5em base size for titles */
}

/*
   Movie Title
   Uses the bold Teko font to stand out. Margin: 0 removes default spacing
   that browsers add to headings. This gives us precise control over spacing.
*/
.movie .title {
  font-family: var(--ff-heading);   /* Bold Teko font - prominent and distinctive */
  margin: 0;                        /* Remove default heading margin */
}

/*
   Movie Metadata
   Shows extra info like year, rating, or runtime. Uses muted gray color
   to make it less prominent than the title. Smaller font size (0.9em)
   indicates it's secondary information.
*/
.movie .meta {
  color: var(--muted);              /* Lighter gray - secondary information */
  margin: 0;                        /* Remove default margin */
  font-size: 0.9em;                 /* Slightly smaller than body text */
}

/*
   Movie Description
   The synopsis or plot summary. Line-height: 1.35 creates comfortable spacing
   between lines for readability. Font-size: 0.95em is slightly smaller than
   the title but still readable.
*/
.movie .desc {
  margin: 0;                        /* Remove default margin */
  line-height: 1.35;                /* 1.35x line height - comfortable reading */
  font-size: 0.95em;                /* Slightly smaller than base size */
}

/*
   Movie Card Button
   The "Watch Now" button takes full width and is pushed to the bottom of
   the card using margin-top: auto. This creates a consistent layout where
   the button is always at the bottom, regardless of description length.
*/
.movie .btn {
  width: 100%;                      /* Full width of card */
  margin-top: auto;                 /* Pushes button to bottom - flexbox/grid trick */
}

/*
   ═══════════════════════════════════════════════════════════════
   FEATURED MOVIE - Hero Section
   ═══════════════════════════════════════════════════════════════

   This is the featured movie section at the top of the page - currently
   showing "Who Framed Roger Rabbit". It's larger and more prominent than
   other movies. The layout changes based on screen size:

   - Mobile: Everything stacks vertically (poster, title, description, button)
   - Tablet: 2-column layout (poster left, content right)
   - Desktop: Poster on top, description left, button right
*/

/*
   Featured Movie Container
   Uses CSS Grid to arrange elements. On mobile, it's a single column.
   The gap creates space between the poster and content area.
*/
.movie-hero {
  display: grid;
  grid-template-columns: 1fr;       /* Single column on mobile */
  gap: var(--space-s);              /* Space between poster and content */
}

/*
   Featured Movie Poster
   The large image at the top. Width: 100% makes it fill the container.
   Height: auto maintains the aspect ratio. Border-radius: 6px adds
   subtle rounded corners for a modern look.
*/
.movie-hero .poster {
  width: 100%;                      /* Full width of container */
  height: auto;                     /* Maintains aspect ratio */
  border-radius: 6px;               /* Subtle rounded corners */
}

/*
   Featured Movie Content Area
   Contains the title, description, and button. Uses grid to arrange them.
   On mobile, everything stacks. On desktop, description and button are side-by-side.
*/
.movie-hero .content {
  display: grid;
  grid-template-columns: 1fr;       /* Single column on mobile */
  gap: var(--space-s);              /* Space between title, description, button */
  align-items: start;               /* Align items to the top */
}

/*
   Featured Movie Title
   Grid-column: 1 ensures it spans the full width on all layouts.
   This makes the title prominent and easy to read.
*/
.movie-hero .title {
  grid-column: 1;                   /* Full width */
}

/*
   Featured Movie Metadata
   We hide the year/rating info on the featured movie to keep it clean
   and focused. The title and description are enough information.
*/
.movie-hero .meta {
  display: none;                    /* Hidden - not needed for featured movie */
}

/*
   Featured Movie Description
   The plot summary. Grid-column: 1 keeps it full width on mobile.
   On desktop, it's repositioned to the left side.
*/
.movie-hero .desc {
  grid-column: 1;                   /* Full width on mobile */
}

/*
   Featured Movie Button
   Full width on mobile for easy tapping. On desktop, it's repositioned
   to the right side. The button is always easy to find and tap.
*/
.movie-hero .btn {
  grid-column: 1;                   /* Full width on mobile */
  justify-self: stretch;            /* Stretch to fill width */
  width: 100%;                      /* Explicit full width */
}

/* Tablet: display as card in 2-column grid */
@media (min-width: 720px) and (max-width: 1023px) {
  .movie-hero {
    grid-template-columns: 1fr;
    gap: var(--space-s);
  }

  .movie-hero .content {
    grid-template-columns: 1fr;
    gap: var(--space-s);
    align-items: start;
  }

  .movie-hero .title {
    grid-column: 1;
  }

  .movie-hero .meta {
    display: none;
  }

  .movie-hero .desc {
    grid-column: 1;
  }

  .movie-hero .btn {
    grid-column: 1;
    justify-self: stretch;
    width: 100%;
  }
}

/* Desktop: poster on top, description left, button right */
@media (min-width: 1024px) {
  .movie-hero {
    grid-template-columns: 1fr;
    gap: var(--space-s);
  }

  .movie-hero .poster {
    width: 100%;
    height: auto;
    grid-column: 1;
  }

  .movie-hero .content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-s);
    align-items: end;
  }

  .movie-hero .title {
    grid-column: 1 / -1;
  }

  .movie-hero .meta {
    display: none;
  }

  .movie-hero .desc {
    grid-column: 1;
  }

  .movie-hero .btn {
    grid-column: 2;
    justify-self: end;
    width: auto;
  }
}

/*
   
   TWO-CARD GRID SECTION
   

   This section contains two movie cards: Hook and La La Land.
   The layout changes based on screen size:

   - Mobile: Stacked vertically (one on top of the other)
   - Tablet: Uses display: contents to flow into parent's 2-column grid
   - Desktop: 2-column grid side-by-side

   The "display: contents" trick on tablets is clever - it removes the
   wrapper element from the layout, allowing the cards to flow directly
   into the parent container's 2-column grid.
*/

/*
   Grid Wrapper Container
   On mobile, this is a simple single-column grid. The two cards stack
   vertically with space between them.
*/
.grid-two {
  display: grid;
  grid-template-columns: 1fr;       /* Single column on mobile */
  gap: var(--space-l);              /* Space between the two cards */
}

/*
   TABLET LAYOUT (720px - 1024px)
   On tablets, we use a clever CSS trick: display: contents. This removes
   the wrapper element from the layout flow, allowing the two cards to flow
   directly into the parent container's 2-column grid. This is more efficient
   than creating a separate 2-column grid here.
*/
@media (min-width: 720px) and (max-width: 1023px) {
  .grid-two {
    display: contents;              /* Removes wrapper - cards flow to parent grid */
  }
}

/*
   DESKTOP LAYOUT (1024px+)
   On desktop, we create a proper 2-column grid. The two cards sit side-by-side
   with equal width and space between them.
*/
@media (min-width: 1024px) {
  .grid-two {
    display: grid;
    grid-template-columns: 1fr 1fr;  /* Two equal-width columns */
    gap: var(--space-l);             /* 48px space between cards on desktop */
  }

  /* Card styling on desktop */
  .card {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-s);
  }

  .card .poster {
    width: 100%;
    height: auto;
  }

  .card .content {
    display: grid;
    gap: var(--space-s);
  }

  .card .btn {
    width: 100%;
  }
}

/*
  
   INDIVIDUAL CARD STYLING


   These styles apply to individual movie cards like Hook and La La Land.
   Each card has a poster image, title, description, and watch button.
   The cards inherit from the .movie class but can have their own specific styling.
*/

/*
   Card Container
   Uses CSS Grid to arrange the poster and content vertically.
   The gap creates space between the poster and the text content.
*/
.card {
  display: grid;
  grid-template-columns: 1fr;       /* Single column - poster on top, content below */
  gap: var(--space-s);              /* 16px space between poster and content */
}

/*
   Card Poster Image
   The movie poster image. Width: 100% fills the card width.
   Height: auto maintains the aspect ratio. Border-radius adds
   subtle rounded corners to match the design.
*/
.card .poster {
  width: 100%;                      /* Full width of card */
  height: auto;                     /* Maintains aspect ratio */
  border-radius: 6px;               /* Subtle rounded corners */
}

/*
   Card Content Area
   Contains the title, description, and button. Uses grid for layout.
   Flex: 1 makes it flexible (though grid is the primary layout method).
*/
.card .content {
  display: grid;
  gap: var(--space-s);              /* Space between title, description, button */
  flex: 1;                          /* Flexible sizing */
}

/*
   
   FULL-WIDTH MOVIE ROWS
   

   These are full-width movie sections: Hidden Figures, Palm Springs, and Barbie.
   They're displayed as rows that span the full width of the container.
   The layout changes dramatically based on screen size:

   - Mobile: Stacked vertically (poster on top, description below)
   - Tablet: Still stacked, but flows into the 2-column grid layout
   - Desktop: Side-by-side (poster on left ~1/3, description on right ~2/3)

   This creates a nice progression from simple mobile layout to a more
   sophisticated desktop layout that shows poster and description together.
*/

/*
   Row Container - Mobile Layout
   On mobile, the row is a simple single-column grid. The poster and
   content stack vertically with small gaps between them.
*/
.row {
  display: grid;
  grid-template-columns: 1fr;       /* Single column - everything stacks */
  gap: var(--space-s);              /* 16px space between poster and content */
}

/*
   TABLET LAYOUT (720px - 1024px)
   On tablets, rows remain stacked but flow into the parent's 2-column grid.
   This means two rows appear side-by-side on the page, but each row's
   content (poster and description) remains stacked.
*/
@media (min-width: 720px) and (max-width: 1023px) {
  .row {
    grid-template-columns: 1fr;     /* Still single column - poster on top */
    gap: var(--space-s);            /* 16px space between poster and content */
  }

  .row .content {
    display: grid;
    gap: var(--space-s);            /* Space between title, description, button */
  }

  .row .btn {
    width: 100%;                    /* Full width button on tablets */
  }
}

/*
   DESKTOP LAYOUT (1024px+)
   On desktop, rows transform into a side-by-side layout. The poster takes
   up about 1/3 of the width (1fr), and the description takes up about 2/3 (1.5fr).
   This creates a nice visual balance and makes efficient use of the wide screen.
   Align-items: center vertically centers the content next to the poster.
*/
@media (min-width: 1024px) {
  .row {
    grid-template-columns: 1fr 1.5fr;  /* Poster left (1/3), content right (2/3) */
    gap: var(--space-l);               /* 48px space between poster and content */
    align-items: center;               /* Vertically center content next to poster */
  }

  .row .poster {
    width: 100%;                    /* Full width of its column */
    height: auto;                   /* Maintains aspect ratio */
  }

  .row .content {
    display: grid;
    gap: var(--space-s);            /* Space between title, description, button */
  }

  .row .btn {
    width: auto;                    /* Auto width - not full width on desktop */
  }
}

.row .poster {
  width: 100%;
  height: auto;
  border-radius: 6px;
}

.row .content {
  display: grid;
  gap: var(--space-s);
}

